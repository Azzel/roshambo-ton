;; ---- Smart contract main code ----
;; smart contract to play roshabmo (sciccor paper rock)

() processGameResult(int query_id, slice s_addr, int value, int myRoshambo, int mode) impure {
  send_raw_message(
    begin_cell()
      ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress(addr_none$00) -> 011000 -> 0x18
      .store_uint(0x18, 6)
      .store_slice(s_addr)
      .store_grams(value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(0xff000001, 32) ;; game result flag?
      .store_uint(query_id, 64)
      .store_int(myRoshambo, 8)
    .end_cell(),
    mode
  );
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if(flags & 1) {
    ;; ignore all bounced messages
    return ();
  }

  if( in_msg.slice_empty?() ) {
    ;; inbound message has empty body - just fill balance for prizes
    return ();
  }

  int op = in_msg~load_uint(32);
  if(op == 0) {
    ;; simple transfer with comment - just fill balance for prizes
    return ();
  }

  ;; max bet amount should be 1 Gram
  throw_if(100, msg_value > 1000000000);

  var s_addr = cs~load_msg_addr();
  int query_id = in_msg~load_uint(64);

  int playerRoshambo = in_msg~load_int(8);
  throw_if(104, (playerRoshambo > 2) | (playerRoshambo < 0)); ;; only 0 1 2

  ;; for local test rand functions not available
  randomize_lt();
  int myRoshambo = rand(3);

  ;; rules: 0 < 1, 1 < 2, 2 < 0
  ;; msg mode for send_raw_message
  ;; +1 - pay fees
  ;; +2 - ignore errors (?)
  ;; +64 - return received amount
  if(myRoshambo == playerRoshambo) {
    ;; if equals than return received amount back with 0 prize
    return processGameResult(query_id, s_addr, 0, myRoshambo, 64);
  } elseif(((myRoshambo - 1) == playerRoshambo) | ((myRoshambo == 0) & (playerRoshambo == 2))) {
    ;; player looses - send back message with just our roshammbo number
    return processGameResult(query_id, s_addr, 0, myRoshambo, 1 + 2);
  } else {
    ;; player wins - return received amount and add prize as betAmount and pay fee
    return processGameResult(query_id, s_addr, msg_value, myRoshambo, 64 + 1);
  }
}

() recv_external(slice in_msg) impure {
  ;; very simple version - no external messages implied
  ;; do nothing
}

;; ---- Smart contract main code end ----
